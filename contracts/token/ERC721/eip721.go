// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package eipnft

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SimpleNFTWithPaymentAndAuctionBuyOffer is an auto generated low-level Go binding around an user-defined struct.
type SimpleNFTWithPaymentAndAuctionBuyOffer struct {
	Buyer      common.Address
	OfferPrice *big.Int
}

// EipnftMetaData contains all meta data concerning the Eipnft contract.
var EipnftMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"createNftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getInterestedBuyers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"}],\"internalType\":\"structSimpleNFTWithPaymentAndAuction.BuyOffer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMinimumPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"purchaseNftToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"}],\"name\":\"registerInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// EipnftABI is the input ABI used to generate the binding from.
// Deprecated: Use EipnftMetaData.ABI instead.
var EipnftABI = EipnftMetaData.ABI

// EipnftBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EipnftMetaData.Bin instead.
var EipnftBin = EipnftMetaData.Bin

// DeployEipnft deploys a new Ethereum contract, binding an instance of Eipnft to it.
func DeployEipnft(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, paymentToken common.Address) (common.Address, *types.Transaction, *Eipnft, error) {
	parsed, err := EipnftMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EipnftBin), backend, name, symbol, paymentToken)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Eipnft{EipnftCaller: EipnftCaller{contract: contract}, EipnftTransactor: EipnftTransactor{contract: contract}, EipnftFilterer: EipnftFilterer{contract: contract}}, nil
}

// Eipnft is an auto generated Go binding around an Ethereum contract.
type Eipnft struct {
	EipnftCaller     // Read-only binding to the contract
	EipnftTransactor // Write-only binding to the contract
	EipnftFilterer   // Log filterer for contract events
}

// EipnftCaller is an auto generated read-only Go binding around an Ethereum contract.
type EipnftCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EipnftTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EipnftTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EipnftFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EipnftFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EipnftSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EipnftSession struct {
	Contract     *Eipnft           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EipnftCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EipnftCallerSession struct {
	Contract *EipnftCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// EipnftTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EipnftTransactorSession struct {
	Contract     *EipnftTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EipnftRaw is an auto generated low-level Go binding around an Ethereum contract.
type EipnftRaw struct {
	Contract *Eipnft // Generic contract binding to access the raw methods on
}

// EipnftCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EipnftCallerRaw struct {
	Contract *EipnftCaller // Generic read-only contract binding to access the raw methods on
}

// EipnftTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EipnftTransactorRaw struct {
	Contract *EipnftTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEipnft creates a new instance of Eipnft, bound to a specific deployed contract.
func NewEipnft(address common.Address, backend bind.ContractBackend) (*Eipnft, error) {
	contract, err := bindEipnft(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Eipnft{EipnftCaller: EipnftCaller{contract: contract}, EipnftTransactor: EipnftTransactor{contract: contract}, EipnftFilterer: EipnftFilterer{contract: contract}}, nil
}

// NewEipnftCaller creates a new read-only instance of Eipnft, bound to a specific deployed contract.
func NewEipnftCaller(address common.Address, caller bind.ContractCaller) (*EipnftCaller, error) {
	contract, err := bindEipnft(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EipnftCaller{contract: contract}, nil
}

// NewEipnftTransactor creates a new write-only instance of Eipnft, bound to a specific deployed contract.
func NewEipnftTransactor(address common.Address, transactor bind.ContractTransactor) (*EipnftTransactor, error) {
	contract, err := bindEipnft(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EipnftTransactor{contract: contract}, nil
}

// NewEipnftFilterer creates a new log filterer instance of Eipnft, bound to a specific deployed contract.
func NewEipnftFilterer(address common.Address, filterer bind.ContractFilterer) (*EipnftFilterer, error) {
	contract, err := bindEipnft(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EipnftFilterer{contract: contract}, nil
}

// bindEipnft binds a generic wrapper to an already deployed contract.
func bindEipnft(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EipnftABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Eipnft *EipnftRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Eipnft.Contract.EipnftCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Eipnft *EipnftRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Eipnft.Contract.EipnftTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Eipnft *EipnftRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Eipnft.Contract.EipnftTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Eipnft *EipnftCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Eipnft.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Eipnft *EipnftTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Eipnft.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Eipnft *EipnftTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Eipnft.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Eipnft *EipnftCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Eipnft *EipnftSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Eipnft.Contract.BalanceOf(&_Eipnft.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Eipnft *EipnftCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Eipnft.Contract.BalanceOf(&_Eipnft.CallOpts, owner)
}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint256)
func (_Eipnft *EipnftCaller) Counter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "counter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint256)
func (_Eipnft *EipnftSession) Counter() (*big.Int, error) {
	return _Eipnft.Contract.Counter(&_Eipnft.CallOpts)
}

// Counter is a free data retrieval call binding the contract method 0x61bc221a.
//
// Solidity: function counter() view returns(uint256)
func (_Eipnft *EipnftCallerSession) Counter() (*big.Int, error) {
	return _Eipnft.Contract.Counter(&_Eipnft.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Eipnft *EipnftCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Eipnft *EipnftSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Eipnft.Contract.GetApproved(&_Eipnft.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Eipnft *EipnftCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Eipnft.Contract.GetApproved(&_Eipnft.CallOpts, tokenId)
}

// GetInterestedBuyers is a free data retrieval call binding the contract method 0xbf906232.
//
// Solidity: function getInterestedBuyers(uint256 tokenId) view returns((address,uint256)[])
func (_Eipnft *EipnftCaller) GetInterestedBuyers(opts *bind.CallOpts, tokenId *big.Int) ([]SimpleNFTWithPaymentAndAuctionBuyOffer, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "getInterestedBuyers", tokenId)

	if err != nil {
		return *new([]SimpleNFTWithPaymentAndAuctionBuyOffer), err
	}

	out0 := *abi.ConvertType(out[0], new([]SimpleNFTWithPaymentAndAuctionBuyOffer)).(*[]SimpleNFTWithPaymentAndAuctionBuyOffer)

	return out0, err

}

// GetInterestedBuyers is a free data retrieval call binding the contract method 0xbf906232.
//
// Solidity: function getInterestedBuyers(uint256 tokenId) view returns((address,uint256)[])
func (_Eipnft *EipnftSession) GetInterestedBuyers(tokenId *big.Int) ([]SimpleNFTWithPaymentAndAuctionBuyOffer, error) {
	return _Eipnft.Contract.GetInterestedBuyers(&_Eipnft.CallOpts, tokenId)
}

// GetInterestedBuyers is a free data retrieval call binding the contract method 0xbf906232.
//
// Solidity: function getInterestedBuyers(uint256 tokenId) view returns((address,uint256)[])
func (_Eipnft *EipnftCallerSession) GetInterestedBuyers(tokenId *big.Int) ([]SimpleNFTWithPaymentAndAuctionBuyOffer, error) {
	return _Eipnft.Contract.GetInterestedBuyers(&_Eipnft.CallOpts, tokenId)
}

// GetMinimumPrice is a free data retrieval call binding the contract method 0x463e0318.
//
// Solidity: function getMinimumPrice(uint256 tokenId) view returns(uint256)
func (_Eipnft *EipnftCaller) GetMinimumPrice(opts *bind.CallOpts, tokenId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "getMinimumPrice", tokenId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinimumPrice is a free data retrieval call binding the contract method 0x463e0318.
//
// Solidity: function getMinimumPrice(uint256 tokenId) view returns(uint256)
func (_Eipnft *EipnftSession) GetMinimumPrice(tokenId *big.Int) (*big.Int, error) {
	return _Eipnft.Contract.GetMinimumPrice(&_Eipnft.CallOpts, tokenId)
}

// GetMinimumPrice is a free data retrieval call binding the contract method 0x463e0318.
//
// Solidity: function getMinimumPrice(uint256 tokenId) view returns(uint256)
func (_Eipnft *EipnftCallerSession) GetMinimumPrice(tokenId *big.Int) (*big.Int, error) {
	return _Eipnft.Contract.GetMinimumPrice(&_Eipnft.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Eipnft *EipnftCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Eipnft *EipnftSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Eipnft.Contract.IsApprovedForAll(&_Eipnft.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Eipnft *EipnftCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Eipnft.Contract.IsApprovedForAll(&_Eipnft.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Eipnft *EipnftCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Eipnft *EipnftSession) Name() (string, error) {
	return _Eipnft.Contract.Name(&_Eipnft.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Eipnft *EipnftCallerSession) Name() (string, error) {
	return _Eipnft.Contract.Name(&_Eipnft.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Eipnft *EipnftCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Eipnft *EipnftSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Eipnft.Contract.OwnerOf(&_Eipnft.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Eipnft *EipnftCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Eipnft.Contract.OwnerOf(&_Eipnft.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Eipnft *EipnftCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Eipnft *EipnftSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Eipnft.Contract.SupportsInterface(&_Eipnft.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Eipnft *EipnftCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Eipnft.Contract.SupportsInterface(&_Eipnft.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Eipnft *EipnftCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Eipnft *EipnftSession) Symbol() (string, error) {
	return _Eipnft.Contract.Symbol(&_Eipnft.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Eipnft *EipnftCallerSession) Symbol() (string, error) {
	return _Eipnft.Contract.Symbol(&_Eipnft.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Eipnft *EipnftCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _Eipnft.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Eipnft *EipnftSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Eipnft.Contract.TokenURI(&_Eipnft.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_Eipnft *EipnftCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _Eipnft.Contract.TokenURI(&_Eipnft.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Eipnft *EipnftTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Eipnft *EipnftSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.Approve(&_Eipnft.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Eipnft *EipnftTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.Approve(&_Eipnft.TransactOpts, to, tokenId)
}

// CreateNftToken is a paid mutator transaction binding the contract method 0xaaeb1740.
//
// Solidity: function createNftToken(string tokenURI) returns()
func (_Eipnft *EipnftTransactor) CreateNftToken(opts *bind.TransactOpts, tokenURI string) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "createNftToken", tokenURI)
}

// CreateNftToken is a paid mutator transaction binding the contract method 0xaaeb1740.
//
// Solidity: function createNftToken(string tokenURI) returns()
func (_Eipnft *EipnftSession) CreateNftToken(tokenURI string) (*types.Transaction, error) {
	return _Eipnft.Contract.CreateNftToken(&_Eipnft.TransactOpts, tokenURI)
}

// CreateNftToken is a paid mutator transaction binding the contract method 0xaaeb1740.
//
// Solidity: function createNftToken(string tokenURI) returns()
func (_Eipnft *EipnftTransactorSession) CreateNftToken(tokenURI string) (*types.Transaction, error) {
	return _Eipnft.Contract.CreateNftToken(&_Eipnft.TransactOpts, tokenURI)
}

// PurchaseNftToken is a paid mutator transaction binding the contract method 0x9fb1953c.
//
// Solidity: function purchaseNftToken(uint256 tokenId) returns(bool)
func (_Eipnft *EipnftTransactor) PurchaseNftToken(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "purchaseNftToken", tokenId)
}

// PurchaseNftToken is a paid mutator transaction binding the contract method 0x9fb1953c.
//
// Solidity: function purchaseNftToken(uint256 tokenId) returns(bool)
func (_Eipnft *EipnftSession) PurchaseNftToken(tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.PurchaseNftToken(&_Eipnft.TransactOpts, tokenId)
}

// PurchaseNftToken is a paid mutator transaction binding the contract method 0x9fb1953c.
//
// Solidity: function purchaseNftToken(uint256 tokenId) returns(bool)
func (_Eipnft *EipnftTransactorSession) PurchaseNftToken(tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.PurchaseNftToken(&_Eipnft.TransactOpts, tokenId)
}

// RegisterInterest is a paid mutator transaction binding the contract method 0xf6aa23ae.
//
// Solidity: function registerInterest(uint256 tokenId, uint256 offerPrice) returns(bool)
func (_Eipnft *EipnftTransactor) RegisterInterest(opts *bind.TransactOpts, tokenId *big.Int, offerPrice *big.Int) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "registerInterest", tokenId, offerPrice)
}

// RegisterInterest is a paid mutator transaction binding the contract method 0xf6aa23ae.
//
// Solidity: function registerInterest(uint256 tokenId, uint256 offerPrice) returns(bool)
func (_Eipnft *EipnftSession) RegisterInterest(tokenId *big.Int, offerPrice *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.RegisterInterest(&_Eipnft.TransactOpts, tokenId, offerPrice)
}

// RegisterInterest is a paid mutator transaction binding the contract method 0xf6aa23ae.
//
// Solidity: function registerInterest(uint256 tokenId, uint256 offerPrice) returns(bool)
func (_Eipnft *EipnftTransactorSession) RegisterInterest(tokenId *big.Int, offerPrice *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.RegisterInterest(&_Eipnft.TransactOpts, tokenId, offerPrice)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Eipnft *EipnftTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Eipnft *EipnftSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.SafeTransferFrom(&_Eipnft.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Eipnft *EipnftTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.SafeTransferFrom(&_Eipnft.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Eipnft *EipnftTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Eipnft *EipnftSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Eipnft.Contract.SafeTransferFrom0(&_Eipnft.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Eipnft *EipnftTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Eipnft.Contract.SafeTransferFrom0(&_Eipnft.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Eipnft *EipnftTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Eipnft *EipnftSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Eipnft.Contract.SetApprovalForAll(&_Eipnft.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Eipnft *EipnftTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Eipnft.Contract.SetApprovalForAll(&_Eipnft.TransactOpts, operator, approved)
}

// SetMinimumPrice is a paid mutator transaction binding the contract method 0xbbd470d1.
//
// Solidity: function setMinimumPrice(uint256 tokenId, uint256 paymentAmount) returns(bool)
func (_Eipnft *EipnftTransactor) SetMinimumPrice(opts *bind.TransactOpts, tokenId *big.Int, paymentAmount *big.Int) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "setMinimumPrice", tokenId, paymentAmount)
}

// SetMinimumPrice is a paid mutator transaction binding the contract method 0xbbd470d1.
//
// Solidity: function setMinimumPrice(uint256 tokenId, uint256 paymentAmount) returns(bool)
func (_Eipnft *EipnftSession) SetMinimumPrice(tokenId *big.Int, paymentAmount *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.SetMinimumPrice(&_Eipnft.TransactOpts, tokenId, paymentAmount)
}

// SetMinimumPrice is a paid mutator transaction binding the contract method 0xbbd470d1.
//
// Solidity: function setMinimumPrice(uint256 tokenId, uint256 paymentAmount) returns(bool)
func (_Eipnft *EipnftTransactorSession) SetMinimumPrice(tokenId *big.Int, paymentAmount *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.SetMinimumPrice(&_Eipnft.TransactOpts, tokenId, paymentAmount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Eipnft *EipnftTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Eipnft *EipnftSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.TransferFrom(&_Eipnft.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Eipnft *EipnftTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Eipnft.Contract.TransferFrom(&_Eipnft.TransactOpts, from, to, tokenId)
}

// EipnftApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Eipnft contract.
type EipnftApprovalIterator struct {
	Event *EipnftApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EipnftApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EipnftApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EipnftApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EipnftApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EipnftApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EipnftApproval represents a Approval event raised by the Eipnft contract.
type EipnftApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Eipnft *EipnftFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*EipnftApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Eipnft.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &EipnftApprovalIterator{contract: _Eipnft.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Eipnft *EipnftFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *EipnftApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Eipnft.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EipnftApproval)
				if err := _Eipnft.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Eipnft *EipnftFilterer) ParseApproval(log types.Log) (*EipnftApproval, error) {
	event := new(EipnftApproval)
	if err := _Eipnft.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EipnftApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Eipnft contract.
type EipnftApprovalForAllIterator struct {
	Event *EipnftApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EipnftApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EipnftApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EipnftApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EipnftApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EipnftApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EipnftApprovalForAll represents a ApprovalForAll event raised by the Eipnft contract.
type EipnftApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Eipnft *EipnftFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*EipnftApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Eipnft.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &EipnftApprovalForAllIterator{contract: _Eipnft.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Eipnft *EipnftFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *EipnftApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Eipnft.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EipnftApprovalForAll)
				if err := _Eipnft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Eipnft *EipnftFilterer) ParseApprovalForAll(log types.Log) (*EipnftApprovalForAll, error) {
	event := new(EipnftApprovalForAll)
	if err := _Eipnft.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EipnftTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Eipnft contract.
type EipnftTransferIterator struct {
	Event *EipnftTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EipnftTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EipnftTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EipnftTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EipnftTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EipnftTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EipnftTransfer represents a Transfer event raised by the Eipnft contract.
type EipnftTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Eipnft *EipnftFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*EipnftTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Eipnft.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &EipnftTransferIterator{contract: _Eipnft.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Eipnft *EipnftFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *EipnftTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Eipnft.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EipnftTransfer)
				if err := _Eipnft.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Eipnft *EipnftFilterer) ParseTransfer(log types.Log) (*EipnftTransfer, error) {
	event := new(EipnftTransfer)
	if err := _Eipnft.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
